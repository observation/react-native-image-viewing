diff --git a/dist/ImageViewing.js b/dist/ImageViewing.js
index 3d7641a..d8fe114 100644
--- a/dist/ImageViewing.js
+++ b/dist/ImageViewing.js
@@ -17,7 +17,7 @@ const DEFAULT_ANIMATION_TYPE = "fade";
 const DEFAULT_BG_COLOR = "#000";
 const DEFAULT_DELAY_LONG_PRESS = 800;
 const SCREEN = Dimensions.get("screen");
-const SCREEN_WIDTH = SCREEN.width;
+const SCREEN_WIDTH = SCREEN.width < SCREEN.height ? SCREEN.width : SCREEN.height;
 function ImageViewing({ images, keyExtractor, imageIndex, visible, onRequestClose, onLongPress = () => { }, onImageIndexChange, animationType = DEFAULT_ANIMATION_TYPE, backgroundColor = DEFAULT_BG_COLOR, presentationStyle, swipeToCloseEnabled, doubleTapToZoomEnabled, delayLongPress = DEFAULT_DELAY_LONG_PRESS, HeaderComponent, FooterComponent, }) {
     const imageList = useRef(null);
     const [opacity, onRequestCloseEnhanced] = useRequestClose(onRequestClose);
diff --git a/dist/components/ImageItem/ImageItem.ios.js b/dist/components/ImageItem/ImageItem.ios.js
index 0708505..f1ebafc 100644
--- a/dist/components/ImageItem/ImageItem.ios.js
+++ b/dist/components/ImageItem/ImageItem.ios.js
@@ -14,8 +14,8 @@ import { ImageLoading } from "./ImageLoading";
 const SWIPE_CLOSE_OFFSET = 75;
 const SWIPE_CLOSE_VELOCITY = 1.55;
 const SCREEN = Dimensions.get("screen");
-const SCREEN_WIDTH = SCREEN.width;
-const SCREEN_HEIGHT = SCREEN.height;
+const SCREEN_WIDTH = SCREEN.width < SCREEN.height ? SCREEN.width : SCREEN.height;
+const SCREEN_HEIGHT = SCREEN.width > SCREEN.height ? SCREEN.width : SCREEN.height;
 const ImageItem = ({ imageSrc, onZoom, onRequestClose, onLongPress, delayLongPress, swipeToCloseEnabled = true, doubleTapToZoomEnabled = true, }) => {
     const scrollViewRef = useRef(null);
     const [loaded, setLoaded] = useState(false);
diff --git a/dist/components/ImageItem/ImageLoading.js b/dist/components/ImageItem/ImageLoading.js
index 9770f7d..4d4499a 100644
--- a/dist/components/ImageItem/ImageLoading.js
+++ b/dist/components/ImageItem/ImageLoading.js
@@ -8,8 +8,8 @@
 import React from "react";
 import { ActivityIndicator, Dimensions, StyleSheet, View } from "react-native";
 const SCREEN = Dimensions.get("screen");
-const SCREEN_WIDTH = SCREEN.width;
-const SCREEN_HEIGHT = SCREEN.height;
+const SCREEN_WIDTH = SCREEN.width < SCREEN.height ? SCREEN.width : SCREEN.height;
+const SCREEN_HEIGHT = SCREEN.width > SCREEN.height ? SCREEN.width : SCREEN.height;
 export const ImageLoading = () => (<View style={styles.loading}>
     <ActivityIndicator size="small" color="#FFF"/>
   </View>);
diff --git a/dist/hooks/usePanResponder.js b/dist/hooks/usePanResponder.js
index 99dcbc7..db9c78d 100644
--- a/dist/hooks/usePanResponder.js
+++ b/dist/hooks/usePanResponder.js
@@ -9,8 +9,8 @@ import { useMemo, useEffect } from "react";
 import { Animated, Dimensions, } from "react-native";
 import { createPanResponder, getDistanceBetweenTouches, getImageTranslate, getImageDimensionsByTranslate, } from "../utils";
 const SCREEN = Dimensions.get("window");
-const SCREEN_WIDTH = SCREEN.width;
-const SCREEN_HEIGHT = SCREEN.height;
+const SCREEN_WIDTH = SCREEN.width < SCREEN.height ? SCREEN.width : SCREEN.height;
+const SCREEN_HEIGHT = SCREEN.width > SCREEN.height ? SCREEN.width : SCREEN.height;
 const MIN_DIMENSION = Math.min(SCREEN_WIDTH, SCREEN_HEIGHT);
 const SCALE_MAX = 2;
 const DOUBLE_TAP_DELAY = 300;
diff --git a/dist/hooks/useZoomPanResponder.js b/dist/hooks/useZoomPanResponder.js
index 37a3376..6f6eca2 100644
--- a/dist/hooks/useZoomPanResponder.js
+++ b/dist/hooks/useZoomPanResponder.js
@@ -9,8 +9,8 @@ import { useMemo, useEffect } from "react";
 import { Animated, Dimensions } from "react-native";
 import { createPanResponder, getDistanceBetweenTouches, getImageTranslate, getImageDimensionsByTranslate } from "../utils";
 const SCREEN = Dimensions.get("window");
-const SCREEN_WIDTH = SCREEN.width;
-const SCREEN_HEIGHT = SCREEN.height;
+const SCREEN_WIDTH = SCREEN.width < SCREEN.height ? SCREEN.width : SCREEN.height;
+const SCREEN_HEIGHT = SCREEN.width > SCREEN.height ? SCREEN.width : SCREEN.height;
 const SCALE_MAX = 2;
 const DOUBLE_TAP_DELAY = 300;
 const OUT_BOUND_MULTIPLIER = 0.75;
